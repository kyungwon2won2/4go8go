<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--
    int countByPostId(@Param("postId") int postId);
 -->
<mapper namespace="com.example.demo.mapper.LikeMapper">

    <insert id="insert" parameterType="com.example.demo.domain.post.model.Like">
        INSERT INTO likes (user_id, post_id, created_at)
        VALUES (#{userId}, #{postId}, NOW())
    </insert>

    <delete id="delete">
        DELETE FROM likes
        WHERE user_id = #{userId} AND post_id = #{postId}
    </delete>

    <delete id="deleteByPostId" parameterType="int">
        DELETE FROM likes WHERE post_id = #{postId}
    </delete>

    <select id="exists" resultType="boolean">
        SELECT EXISTS (
            SELECT 1 FROM likes WHERE user_id = #{userId} AND post_id = #{postId}
        )
    </select>

    <select id="countByPostId" resultType="int">
        SELECT COUNT(*) FROM likes WHERE post_id = #{postId}
    </select>

    <select id="selectLikedPostsByUserId" parameterType="map" resultType="com.example.demo.domain.post.dto.GeneralPostDto">
        SELECT p.post_id, p.title, u.name AS nickname, p.view_count, p.comment_count, p.created_at
        FROM likes l
        JOIN post p ON l.post_id = p.post_id
        JOIN user u ON p.user_id = u.user_id
        WHERE l.user_id = #{userId} AND p.post_category_id = 2
        ORDER BY l.created_at DESC
        LIMIT #{pageSize} OFFSET #{offset}
    </select>

    <select id="countLikedPostsByUserId" resultType="int">
        SELECT COUNT(*)
        FROM likes l
        JOIN post p ON l.post_id = p.post_id
        WHERE l.user_id = #{userId} AND p.post_category_id = 2
    </select>


</mapper>