<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.example.demo.mapper.PostMapper">
    <!-- Post 엔티티용 resultMap 정의 -->
    <resultMap id="PostResultMap" type="com.example.demo.domain.post.model.Post">
        <!-- DB 컬럼과 Java 변수명 매핑 -->
        <result property="postId" column="post_id"/>
        <result property="postCategoryId" column="post_category_id"/>
        <result property="userId" column="user_id"/>
        <result property="title" column="title"/>
        <result property="viewCount" column="view_count"/>
        <result property="commentCount" column="comment_count"/>
        <result property="createdAt" column="created_at"/>
        <result property="updatedAt" column="updated_at"/>
        <result property="content" column="content"/>
    </resultMap>

    <!-- GeneralPostDto용 resultMap 정의 -->
    <resultMap id="GeneralPostDtoMap" type="com.example.demo.domain.post.dto.GeneralPostDto">
        <id property="postId" column="post_id" />
        <result property="title" column="title" />
        <result property="userName" column="nickname" />
        <result property="viewCount" column="view_count" />
        <result property="commentCount" column="comment_count" />
        <result property="createdAt" column="created_at" />
    </resultMap>

    <!-- GeneralDetailDto용 resultMap 정의 -->
    <resultMap id="GeneralDetailDtoMap" type="com.example.demo.domain.post.dto.GeneralDetailDto">
        <id property="postId" column="post_id"/>
        <result property="postCategoryId" column="post_category_id"/>
        <result property="title" column="title"/>
        <result property="userName" column="name"/>
        <result property="viewCount" column="view_count"/>
        <result property="commentCount" column="comment_count"/>
        <result property="createdAt" column="created_at"/>
        <result property="updatedAt" column="updated_at"/>
        <result property="content" column="content"/>
        <result property="userId" column="user_id"/>
    </resultMap>

    <select id="selectAllPostsDto" resultMap="GeneralPostDtoMap">
        select p.post_id, p.title, u.name, p.view_count, p.comment_count, p.created_at
        from post p
        join user u on p.user_id = u.user_id
        order by p.post_id desc
    </select>

    <!--
    <select id="selectAllPost" resultType="com.example.demo.domain.post.model.Post">
        select *
        from post p join
        order by post_id desc
    </select>

    <select id="selectPostById" resultType="com.example.demo.domain.post.model.Post">
        select *
        from post
        where post_id = #{postId}
    </select>
    -->
    <select id="selectPostByIdDto" resultMap="GeneralDetailDtoMap">
        select p.post_id, p.title, u.name, p.view_count, p.comment_count, p.created_at, p.updated_at, p.content, p.post_category_id, p.user_id
        from post p
        join user u on p.user_id = u.user_id
        where p.post_id = #{postId}
    </select>

    <update id="updatePost" parameterType="com.example.demo.domain.post.model.Post">
        update post
        set
        title = #{title},
        content = #{content},
        updated_at = #{updatedAt}
        where post_id = #{postId}
    </update>


    <delete id="deletePostById">
        delete
        from post
        where post_id = #{postId}
    </delete>

    <update id="updateProductDetails" parameterType="com.example.demo.domain.post.dto.UpdateProductDto">
        UPDATE product
        SET price = #{price},
        condition = #{condition},
        category = #{category}
        WHERE post_id = #{postId}
    </update>

    <insert id="insertPost" parameterType="com.example.demo.domain.post.model.Post" useGeneratedKeys="true" keyProperty="postId">
        insert into post
        (
            post_category_id,
            user_id,
            title,
            content,
            view_count,
            comment_count,
            created_at,
            updated_at
        )
        values
        (
            #{postCategoryId},
            #{userId},
            #{title},
            #{content},
            #{viewCount},
            #{commentCount},
            #{createdAt},
            #{updatedAt}
        )
    </insert>

    <!-- product 테이블 업데이트 -->
    <update id="updatePostContentAndTitle">
        UPDATE post
        SET title = #{title},
        content = #{content}
        WHERE post_id = #{postId}
    </update>

    <!-- 조회수 증가 -->
    <update id="incrementViewCount" parameterType="int">
        update post
        set view_count = view_count + 1
        where post_id = #{postId}
    </update>

    <!-- 페이징된 게시글 목록 -->
    <select id="selectPostsByPage" resultMap="GeneralPostDtoMap">
        SELECT p.post_id, p.title, u.nickname, p.view_count, p.comment_count, p.created_at
        FROM post p
        JOIN user u ON p.user_id = u.user_id
        WHERE p.post_category_id = 2
        ORDER BY p.created_at DESC
        LIMIT #{limit} OFFSET #{offset}
    </select>

    <!-- 전체 게시글 수 -->
    <select id="countAllPosts" resultType="int">
        SELECT COUNT(*) FROM post
    </select>


</mapper>